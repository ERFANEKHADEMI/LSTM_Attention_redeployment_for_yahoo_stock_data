trigger:
- main

variables:
  subscriptionId: '38ca6696-5c82-4571-b2af-bf3f256cf663'
  resourceGroupName: 'rocket_test127'
  location: 'East US'
  functionAppName: '2xa4$(resourceGroupName)'
  tempStorageAccountName: '1qe3$(resourceGroupName)'
  tempContainerName: 'configs'

stages:
  - stage: Continuous_Integration
    jobs:
    - job: Continuous_Integration
      pool:
        vmImage: ubuntu-latest
      steps:
      - task: UsePythonVersion@0
        inputs:
          versionSpec: '3.10'
          addToPath: true
    
      - script: |
          python -m pip install --upgrade pip
          pip install flake8 isort mypy black pylint
        displayName: 'Install Python code quality tools'
    
      - script: |
          flake8 . || echo "Code style issues"
        displayName: 'Check code style with flake8'
    
      - script: |
          isort --check-only . --diff || echo "Import order issues"
        displayName: 'Check import order with isort'
    
      - script: |
          mypy . --ignore-missing-imports || echo "Type checking issues"
        displayName: 'Perform type check with mypy'
    
      - script: |
          black --check . || echo "Code format issues"
        displayName: 'Check code format with black'
    
      - script: |
          pylint . || echo "Code quality issues"
        displayName: 'Check code quality with pylint'

  - stage: Continuous_Deployment
    jobs:
    - job: Continuous_Deployment
      timeoutInMinutes: 30 
      pool:
        vmImage: ubuntu-latest 
      steps:
      - powershell: |
          $tsan = "$(tempStorageAccountName)".ToLower() -replace '[^a-z0-9]', ''
          $tsan = $tsan.Substring(0, [System.Math]::Min($tsan.Length, 24))
          Write-Host "##vso[task.setvariable variable=tempStorageAccountName]$tsan"
        displayName: 'Assign parsed value to tempStorageAccountName pipeline variable'

      - powershell: |
          $fan = "$(functionAppName)".ToLower() -replace '[^a-z0-9]', ''
          $fan = $fan.Substring(0, [System.Math]::Min($fan.Length, 24))
          Write-Host "##vso[task.setvariable variable=functionAppName]$fan"
        displayName: 'Assign parsed value to functionAppName pipeline variable'

      - task: AzureResourceManagerTemplateDeployment@3
        displayName: 'Deploy temporary Azure Blob Storage'
        inputs:
          deploymentScope: 'Resource Group'
          azureResourceManagerConnection: 'Azure subscription 1 ($(subscriptionId))'
          subscriptionId: $(subscriptionId)
          action: 'Create Or Update Resource Group'
          resourceGroupName: $(resourceGroupName)
          location: $(location)
          templateLocation: 'Linked artifact'
          csmFile: '$(Build.SourcesDirectory)/arm_templates/blob_storage/temp_blob_storage_template.json'
          csmParametersFile: '$(Build.SourcesDirectory)/arm_templates/blob_storage/temp_blob_storage_parameters.json'
          overrideParameters: '-storageAccountName "$(tempStorageAccountName)" -containerName "$(tempContainerName)"'
          deploymentMode: 'Incremental'

      - script: |
          tar -czf airbyte.tar.gz airbyte
          tar -czf kafka.tar.gz kafka
          tar -czf airflow.tar.gz airflow
          tar -czf mlflow.tar.gz mlflow
        displayName: 'Compress Folders'
      
      - task: AzureCLI@2
        displayName: 'Upload tar.gz files to Azure Blob Storage'  
        inputs:
          azureSubscription: 'Azure subscription 1 ($(subscriptionId))'
          scriptType: 'bash'
          scriptLocation: 'inlineScript'
          inlineScript: |
            az storage blob upload --account-name $(tempStorageAccountName) --container-name $(tempContainerName) --file airbyte.tar.gz --name airbyte.tar.gz --overwrite true
            az storage blob upload --account-name $(tempStorageAccountName) --container-name $(tempContainerName) --file kafka.tar.gz --name kafka.tar.gz --overwrite true
            az storage blob upload --account-name $(tempStorageAccountName) --container-name $(tempContainerName) --file airflow.tar.gz --name airflow.tar.gz --overwrite true
            az storage blob upload --account-name $(tempStorageAccountName) --container-name $(tempContainerName) --file mlflow.tar.gz --name mlflow.tar.gz --overwrite true
      
      - task: AzureResourceManagerTemplateDeployment@3
        displayName: 'Deploy Azure ML Studio Workspace and dependencies'
        inputs:
          deploymentScope: 'Resource Group'
          azureResourceManagerConnection: 'Azure subscription 1 ($(subscriptionId))'
          subscriptionId: $(subscriptionId)
          action: 'Create Or Update Resource Group'
          resourceGroupName: $(resourceGroupName)
          location: $(location)
          templateLocation: 'Linked artifact'
          csmFile: '$(Build.SourcesDirectory)/arm_templates/mlstudio/azureml_template.json'
          csmParametersFile: '$(Build.SourcesDirectory)/arm_templates/mlstudio/azureml_parameters.json'
          deploymentMode: 'Incremental'

      - task: AzureResourceManagerTemplateDeployment@3
        displayName: 'Deploy Azure Blob Storage'
        inputs:
          deploymentScope: 'Resource Group'
          azureResourceManagerConnection: 'Azure subscription 1 ($(subscriptionId))'
          subscriptionId: $(subscriptionId)
          action: 'Create Or Update Resource Group'
          resourceGroupName: $(resourceGroupName)
          location: $(location)
          templateLocation: 'Linked artifact'
          csmFile: '$(Build.SourcesDirectory)/arm_templates/blob_storage/blob_storage_template.json'
          csmParametersFile: '$(Build.SourcesDirectory)/arm_templates/blob_storage/blob_storage_parameters.json'
          deploymentMode: 'Incremental'

      - task: AzureResourceManagerTemplateDeployment@3
        displayName: 'Deploy Kafka with its infrastructure'
        inputs:
          deploymentScope: 'Resource Group'
          azureResourceManagerConnection: 'Azure subscription 1 ($(subscriptionId))'
          subscriptionId: $(subscriptionId)
          action: 'Create Or Update Resource Group'
          resourceGroupName: $(resourceGroupName)
          location: $(location)
          templateLocation: 'Linked artifact'
          csmFile: '$(Build.SourcesDirectory)/arm_templates/kafka_infra/kafka_infra_template.json'
          csmParametersFile: '$(Build.SourcesDirectory)/arm_templates/kafka_infra/kafka_infra_parameters.json'
          overrideParameters: '-tempStorageAccountName "$(tempStorageAccountName)" -tempContainerName "$(tempContainerName)"'
          deploymentMode: 'Incremental'
      
      - task: AzureResourceManagerTemplateDeployment@3
        displayName: 'Deploy Airbyte with its infrastructure'
        inputs:
          deploymentScope: 'Resource Group'
          azureResourceManagerConnection: 'Azure subscription 1 ($(subscriptionId))'
          subscriptionId: $(subscriptionId)
          action: 'Create Or Update Resource Group'
          resourceGroupName: $(resourceGroupName)
          location: $(location)
          templateLocation: 'Linked artifact'
          csmFile: '$(Build.SourcesDirectory)/arm_templates/airbyte_infra/airbyte_infra_template.json'
          csmParametersFile: '$(Build.SourcesDirectory)/arm_templates/airbyte_infra/airbyte_infra_parameters.json'
          overrideParameters: '-tempStorageAccountName "$(tempStorageAccountName)" -tempContainerName "$(tempContainerName)"'
          deploymentMode: 'Incremental'
      
      - task: AzureResourceManagerTemplateDeployment@3
        displayName: 'Deploy MLflow with its infrastructure'
        inputs:
          deploymentScope: 'Resource Group'
          azureResourceManagerConnection: 'Azure subscription 1 ($(subscriptionId))'
          subscriptionId: $(subscriptionId)
          action: 'Create Or Update Resource Group'
          resourceGroupName: $(resourceGroupName)
          location: $(location)
          templateLocation: 'Linked artifact'
          csmFile: '$(Build.SourcesDirectory)/arm_templates/mlflow_infra/mlflow_infra_template.json'
          csmParametersFile: '$(Build.SourcesDirectory)/arm_templates/mlflow_infra/mlflow_infra_parameters.json'
          overrideParameters: '-tempStorageAccountName "$(tempStorageAccountName)" -tempContainerName "$(tempContainerName)"'
          deploymentMode: 'Incremental'
      
      - task: AzureResourceManagerTemplateDeployment@3
        displayName: 'Deploy Airflow with its infrastructure'
        inputs:
          deploymentScope: 'Resource Group'
          azureResourceManagerConnection: 'Azure subscription 1 ($(subscriptionId))'
          subscriptionId: $(subscriptionId)
          action: 'Create Or Update Resource Group'
          resourceGroupName: $(resourceGroupName)
          location: $(location)
          templateLocation: 'Linked artifact'
          csmFile: '$(Build.SourcesDirectory)/arm_templates/airflow_infra/airflow_infra_template.json'
          csmParametersFile: '$(Build.SourcesDirectory)/arm_templates/airflow_infra/airflow_infra_parameters.json'
          overrideParameters: '-tempStorageAccountName "$(tempStorageAccountName)" -tempContainerName "$(tempContainerName)"'
          deploymentMode: 'Incremental'
      
      - task: AzureResourceManagerTemplateDeployment@3
        displayName: 'Deploy VNet Peering between Airbyte and Kafka'
        inputs:
          deploymentScope: 'Resource Group'
          azureResourceManagerConnection: 'Azure subscription 1 ($(subscriptionId))'
          subscriptionId: $(subscriptionId)
          action: 'Create Or Update Resource Group'
          resourceGroupName: $(resourceGroupName)
          location: $(location)
          templateLocation: 'Linked artifact'
          csmFile: '$(Build.SourcesDirectory)/arm_templates/vnet_peerings/vnet_peering_template.json'
          csmParametersFile: '$(Build.SourcesDirectory)/arm_templates/vnet_peerings/airbyte_kafka_vnet_peering_parameters.json'
          deploymentMode: 'Incremental'
      
      - task: AzureResourceManagerTemplateDeployment@3
        displayName: 'Deploy VNet Peering between Kafka and Airflow'
        inputs:
          deploymentScope: 'Resource Group'
          azureResourceManagerConnection: 'Azure subscription 1 ($(subscriptionId))'
          subscriptionId: $(subscriptionId)
          action: 'Create Or Update Resource Group'
          resourceGroupName: $(resourceGroupName)
          location: $(location)
          templateLocation: 'Linked artifact'
          csmFile: '$(Build.SourcesDirectory)/arm_templates/vnet_peerings/vnet_peering_template.json'
          csmParametersFile: '$(Build.SourcesDirectory)/arm_templates/vnet_peerings/kafka_airflow_vnet_peering_parameters.json'
          deploymentMode: 'Incremental'
      
      - task: AzureResourceManagerTemplateDeployment@3
        displayName: 'Deploy VNet Peering between Airflow and MLflow'
        inputs:
          deploymentScope: 'Resource Group'
          azureResourceManagerConnection: 'Azure subscription 1 ($(subscriptionId))'
          subscriptionId: $(subscriptionId)
          action: 'Create Or Update Resource Group'
          resourceGroupName: $(resourceGroupName)
          location: $(location)
          templateLocation: 'Linked artifact'
          csmFile: '$(Build.SourcesDirectory)/arm_templates/vnet_peerings/vnet_peering_template.json'
          csmParametersFile: '$(Build.SourcesDirectory)/arm_templates/vnet_peerings/airflow_mlflow_vnet_peering_parameters.json'
          deploymentMode: 'Incremental'

      - task: AzureResourceManagerTemplateDeployment@3
        displayName: 'Deploy Private Endpoint from Airflow to Azure Blob Storage'
        inputs:
          deploymentScope: 'Resource Group'
          azureResourceManagerConnection: 'Azure subscription 1 ($(subscriptionId))'
          subscriptionId: $(subscriptionId)
          action: 'Create Or Update Resource Group'
          resourceGroupName: $(resourceGroupName)
          location: $(location)
          templateLocation: 'Linked artifact'
          csmFile: '$(Build.SourcesDirectory)/arm_templates/airflow_infra/airflow_storage_private_endpoint_template.json'
          csmParametersFile: '$(Build.SourcesDirectory)/arm_templates/airflow_infra/airflow_storage_private_endpoint_parameters.json'
          deploymentMode: 'Incremental'

      - task: AzureResourceManagerTemplateDeployment@3
        displayName: 'Deploy Private Endpoint from Airflow to Azure ML Studio Workspace'
        inputs:
          deploymentScope: 'Resource Group'
          azureResourceManagerConnection: 'Azure subscription 1 ($(subscriptionId))'
          subscriptionId: $(subscriptionId)
          action: 'Create Or Update Resource Group'
          resourceGroupName: $(resourceGroupName)
          location: $(location)
          templateLocation: 'Linked artifact'
          csmFile: '$(Build.SourcesDirectory)/arm_templates/airflow_infra/airflow_mlstudio_private_endpoint_template.json'
          csmParametersFile: '$(Build.SourcesDirectory)/arm_templates/airflow_infra/airflow_mlstudio_private_endpoint_parameters.json'
          deploymentMode: 'Incremental'

      - task: AzureResourceManagerTemplateDeployment@3
        displayName: 'Deploy private DNS zone to connect Airflow to Azure Blob Storage'
        inputs:
          deploymentScope: 'Resource Group'
          azureResourceManagerConnection: 'Azure subscription 1 ($(subscriptionId))'
          subscriptionId: $(subscriptionId)
          action: 'Create Or Update Resource Group'
          resourceGroupName: $(resourceGroupName)
          location: $(location)
          templateLocation: 'Linked artifact'
          csmFile: '$(Build.SourcesDirectory)/arm_templates/airflow_infra/private_link_template.json'
          deploymentMode: 'Incremental'  

      - task: AzureResourceManagerTemplateDeployment@3
        displayName: 'Deploy Azure Function App'   
        inputs:
          deploymentScope: 'Resource Group'
          azureResourceManagerConnection: 'Azure subscription 1 ($(subscriptionId))'
          subscriptionId: '$(subscriptionId)'
          action: 'Create Or Update Resource Group'
          resourceGroupName: $(resourceGroupName)
          location: $(location)
          templateLocation: 'Linked artifact'
          csmFile: '$(Build.SourcesDirectory)/arm_templates/function_app/function_app_template.json'
          csmParametersFile: '$(Build.SourcesDirectory)/arm_templates/function_app/function_app_parameters.json'
          overrideParameters: '-name "$(functionAppName)"'
          deploymentMode: 'Incremental'
      
      - task: UsePythonVersion@0
        inputs:
          versionSpec: '3.10'
          addToPath: true
      
      - script: |
          python -m pip install --upgrade pip
          pip install -r $(Build.SourcesDirectory)/FunctionAPI/requirements.txt --target="$(Build.SourcesDirectory)/FunctionAPI/.python_packages/lib/site-packages"
        displayName: 'Install dependencies'
      
      - script: |
          cd $(Build.SourcesDirectory)/FunctionAPI
          zip -r $(Build.ArtifactStagingDirectory)/functionapp.zip .
        displayName: 'Package function app'
      
      - task: AzureFunctionApp@2
        displayName: 'Deploy to Azure Functions'  
        inputs:
          connectedServiceNameARM: 'Azure subscription 1 ($(subscriptionId))'
          appType: 'functionAppLinux'
          appName: $(functionAppName)
          package: '$(Build.ArtifactStagingDirectory)/functionapp.zip'
          runtimeStack: 'PYTHON|3.10'
          deploymentMethod: 'auto'
      
      - task: AzurePowerShell@5
        displayName: 'Roles assignment'
        inputs:
          azureSubscription: 'Azure subscription 1 ($(subscriptionId))'
          ScriptType: 'FilePath'
          ScriptPath: 'scripts/roles_assignment.ps1'
          ScriptArguments: '-resourceGroupName "$(resourceGroupName)" -functionAppName "$(functionAppName)"'
          azurePowerShellVersion: 'LatestVersion'

